<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1388971903256">{:repl-history {:ide [], :local [&quot;(defn pow [x] (* x x))&quot; &quot;(require '[cljs.repl :as repl])&quot; &quot;(require '[cljs.repl.rhino :as rhino])&quot; &quot;(def VM {\n\&quot;besel\&quot; (fn [s] (+ s s)),\n\&quot;wub\&quot; (fn [s] (- s s))\n})&quot; &quot;(VM)&quot; &quot;(let [res (VM \&quot;besel\&quot; nil)]\n\t(type res))&quot; &quot;(let [res (VM \&quot;besel\&quot;)]\n\t(type res))&quot; &quot;(clojure.string/split \&quot;\\\\ prelude.txt run say-hi\&quot; #\&quot;\\s+\&quot;)\n&quot; &quot;(.startsWith \&quot;\\n\&quot; \&quot;\\\\\&quot;)&quot; &quot;(.startsWith \&quot;\\n\&quot; '\\')&quot; &quot;(= \\newline (.substring \&quot;\\n\&quot; 0 1))&quot; &quot;(= \\newline (.substring \\n 0 1))&quot; &quot;(= \\newline (.substring \\newline 0 1))&quot; &quot;(= \\newline (.substring \&quot;\\newline\&quot; 0 1))&quot; &quot;(= \&quot;\\\\\&quot; (.substring \&quot;\\newline\&quot; 0 1))&quot; &quot;(= \&quot;\\n\&quot; (.charAt \&quot;\\newline\&quot; 0))&quot; &quot;(println \\newline \&quot;asd\&quot;)&quot; &quot;(require [cljs.repl :as repl])&quot;], :remote []}}</component>
</project>

