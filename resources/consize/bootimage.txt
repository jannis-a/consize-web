\ def emptystack \ set-dict push \ assoc push \ get-dict push \ swap push swap get-dict assoc set-dict \ swapu emptystack \ push push \ swap push def \ *effect* emptystack emptystack emptystack \ ... push \ -- push \ wrd push push \ lrun push emptystack \ cs push \ ds push \ -- push push \ break push emptystack \ -- push push \ exit push emptystack \ dict' push \ -- push \ dict push push \ remove-fct-assocs push emptystack \ ... push \ -- push push \ pprelude push emptystack \ dict' push \ -- push \ dict push push \ keep-fct-assocs push emptystack \ -- push \ quot push \ result push push \ unit-test push emptystack \ -- push \ word push push \ source push emptystack \ -- push \ stk push push \ set-ds push emptystack \ item push \ -- push \ word push push \ lookup push emptystack \ stream-of-items push \ -- push \ item push push \ -serialize- push emptystack \ quot push \ -- push \ '; push \ ... push \ | push push \ : push emptystack \ -- push push \ printer push emptystack \ wrd' push \ -- push \ wrd push push \ unbracket-stk-repr push emptystack \ wrd push \ -- push \ itm push push \ repr push emptystack \ space push \ -- push push \ <space> push emptystack \ quot' push \ -- push \ quot push push \ dump push emptystack \ quot' push \ ]' push \ ... push \ [ push \ -- push \ quot push \ ] push \ ... push \ [ push push \ look4) push emptystack \ quot push \ -- push \ wrd push push \ lload push emptystack \ ... push \ -- push push \ test-prelude push emptystack \ -- push push \ abort push emptystack push \ repl push emptystack \ -- push push \ *effect* push emptystack \ -- push push \ println push emptystack push \ evaluator push emptystack \ quot push \ -- push push \ bootstrap push emptystack \ cs' push \ ds' push \ -- push \ cs push \ ds push push \ bstep push emptystack \ cs push \ ds push \ -- push \ cs push \ ds push push \ printcc push emptystack \ -- push push \ clear push emptystack \ ... push \ -- push push \ prelude push emptystack \ cs' push \ ds' push \ -- push \ cs push \ ds push push \ step push emptystack \ ... push \ -- push \ wrd push push \ run push emptystack \ body push \ stackeffect push \ wrd push \ -- push \ quot push push \ destruct-definition push emptystack \ quot push \ -- push \ wrd push push \ bootstrap-word push emptystack \ -- push push \ bootimage push emptystack \ stk push \ -- push push \ get-ds push emptystack \ newline push \ -- push push \ <newline> push emptystack \ quot push \ -- push \ wrd push push \ load push emptystack \ -- push \ ] push \ body push \ [ push \ ] push \ effect push \ [ push \ wrd push push \ def+ push emptystack \ -- push \ filename push push \ create-dump push emptystack \ quot push \ cs' push \ ds push \ -- push \ cs push \ ] push \ [ push \ ds push push \ scan4; push emptystack \ -- push push \ say-hi push emptystack \ quot push \ -- push push \ reader push emptystack \ -- push \ itm push \ | push push \ SYMBOL: push emptystack \ quot' push \ -- push \ quot push push \ serialize push mapping push def \ def+ emptystack \ def push \ swap push \ *effect* push \ \ push \ swapu push emptystack push \ assoc push \ *effect* push \ def push \ rot push \ dup push \ rot push def \ unpush emptystack \ top push \ swap push \ pop push \ dup push def \ -rot emptystack \ rot push \ rot push def \ over emptystack \ -rot push \ dup push \ swap push def \ SYMBOL: emptystack \ call/cc push emptystack \ continue push \ concat push \ swap push \ push push \ : push \ \ push \ swapu push \ push push \ \ push \ \ push \ swapu push emptystack \ ; push push \ dup push \ unpush push push def \ case emptystack \ call push \ get push \ get push emptystack \ _|_ push push \ over push \ :else push def \ when emptystack \ if push emptystack push def \ if emptystack \ call push \ choose push def \ choose emptystack \ call push \ lookup push \ equal? push \ false push \ rot push \ swap push def \ call emptystack \ call/cc push emptystack \ continue push \ concat push \ rot push \ unpush push \ swap push push def \ t emptystack \ drop push def \ f emptystack \ drop push \ swap push def \ false emptystack \ f push \ \ push def \ fcall emptystack \ reverse push \ apply push \ swap push emptystack push \ func push \ get-dict push def \ lookup emptystack \ get push \ word-not-found push \ \ push \ get-dict push def \ scan4] emptystack \ case push emptystack emptystack \ scan4[ push \ rot push emptystack push \ drop push push \ } push emptystack \ scan4[ push \ rot push emptystack push \ drop push push \ ] push emptystack \ scan4] push \ swap push \ push push \ \ push \ \ push \ swapu push \ rot push \ unpush push \ drop push push \ \ push emptystack \ scan4] push \ scan4] push \ swap push \ swapu push \ rot push push \ { push emptystack \ scan4] push \ scan4] push \ swap push \ swapu push \ rot push push \ [ push emptystack \ scan4] push \ swap push \ swapu push \ rot push push \ :else push emptystack \ scan4[ push \ rot push emptystack push \ drop push push \ ) push emptystack \ scan4] push \ scan4] push \ swap push \ swapu push \ rot push push \ ( push emptystack \ _|_ push emptystack \ brackets push \ unbalanced push push \ syntax-error push \ \ push push emptystack top push mapping push \ dup push \ unpush push def \ scan4[ emptystack \ case push emptystack emptystack \ scan4[ push \ swap push \ push push \ \ push \ \ push \ swapu push \ rot push \ unpush push \ drop push push \ \ push emptystack \ swap push \ push push \ mapping push \ fcall push \ swap push \ drop push push \ { push emptystack \ swap push \ push push \ swap push \ drop push push \ [ push emptystack \ scan4[ push \ swap push \ swapu push \ rot push push \ :else push emptystack \ swap push \ push push \ fcall push \ swap push \ drop push push \ ( push emptystack \ _|_ push emptystack \ brackets push \ unbalanced push push \ syntax-error push \ \ push push emptystack top push mapping push \ dup push \ unpush push def \ parse-quot emptystack \ call push \ reverse push \ push push \ ] push \ \ push \ reverse push \ push push \ [ push \ \ push def \ destruct-definition emptystack \ parse-quot push \ when push emptystack \ look4) push \ pop push push \ equal? push \ ( push \ \ push \ top push \ dup push \ swap push emptystack push \ pop push \ swap push \ top push \ dup push def \ : emptystack \ call/cc push emptystack \ continue push \ def+ push \ destruct-definition push \ scan4; push \ swap push emptystack push push def \ scan4; emptystack \ case push emptystack emptystack \ scan4; push \ swap push \ swapu push \ push push \ \ push \ \ push \ rot push \ unpush push \ drop push push \ \ push emptystack \ reverse push \ swap push \ drop push push \ ; push emptystack \ scan4; push \ swap push \ swapu push \ rot push push \ :else push emptystack \ _|_ push emptystack \ definition push \ incomplete push push \ syntax-error push \ \ push push emptystack top push mapping push \ dup push \ unpush push def \ look4) emptystack \ case push emptystack emptystack \ look4) push \ swap push \ swapu push \ rot push \ unpush push \ drop push push \ \ push emptystack \ look4) push \ swap push \ swapu push \ rot push push \ :else push emptystack \ swap push \ reverse push \ swap push \ drop push push \ ) push emptystack \ _|_ push emptystack \ effect push \ stack push \ incomplete push push \ syntax-error push \ \ push push emptystack top push mapping push \ dup push \ unpush push def \ read-word emptystack def \ read-mapping emptystack def \ [ emptystack \ call/cc push emptystack \ continue push \ scan4] push push \ [ push \ \ push def \ ( emptystack \ call/cc push emptystack \ continue push \ scan4] push push \ ( push \ \ push def \ { emptystack \ call/cc push emptystack \ continue push \ scan4] push push \ { push \ \ push def